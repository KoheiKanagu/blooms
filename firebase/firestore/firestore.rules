rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // already authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // check if the user is the owner of the document
    function isOwner(uid) {
      return isAuthenticated() && request.auth.uid == uid;
    }

    match /users_v1/{uid} {
      // only the user can read their own data
      allow get: if isOwner(uid);

      // only the user can update their own data, specifically the 'deletedAt' field
      allow update: if isOwner(uid)
            && request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['deletedAt']);
    }

    match /conditions_v1/{document=**} {
      // only the user can read and write their own data
      allow get, list:
        if isAuthenticated() && resource.data.subjectUid == request.auth.uid;

      allow update:
        if isAuthenticated() && resource.data.subjectUid == request.auth.uid
          // only allow updating the 'deletedAt' field
          && request.resource.data.diff(resource.data).affectedKeys()
        .hasOnly(['deletedAt']);

      // only the user can create their own data
      allow create:
        if isAuthenticated() && request.resource.data.subjectUid == request.auth.uid;
    }

    match /highlights_v1/{document=**} {
      // only the user can read their own data
      allow get, list:
        if isAuthenticated() && resource.data.subjectUid == request.auth.uid;

      allow create:
        if isAuthenticated() && request.resource.data.subjectUid == request.auth.uid;

      // only the user can update their own data
      allow update:
        if isAuthenticated() && resource.data.subjectUid == request.auth.uid
          // only allow updating the 'deletedAt' field
          && request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['deletedAt']);
    }
  }
}